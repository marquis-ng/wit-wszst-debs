name: Build

on:
  workflow_dispatch:
  schedule:
    - cron: '6 9 * * *'

concurrency:
  group: ${{github.workflow}}
  cancel-in-progress: true

jobs:
  build:
    name: Build ${{matrix.tool}} for ${{matrix.arch}}
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive
      ARCH: ${{matrix.arch}}
      TOOL: ${{matrix.tool}}
    strategy:
      fail-fast: false
      matrix:
        arch: [armhf, arm64, amd64]
        tool: [wit, wszst]
    outputs:
      wit: ${{steps.version.outputs.wit}}
      wszst: ${{steps.version.outputs.wszst}}
      build_wit: ${{steps.version.outputs.build_wit}}
      build_wszst: ${{steps.version.outputs.build_wszst}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Clone source of ${{matrix.tool}}
        run: |
          if [ "$TOOL" = "wit" ]; then
            TOOL=iso
          elif [ "$TOOL" = "wszst" ]; then
            TOOL=szs
          fi
          git clone "https://github.com/Wiimm/wiimms-$TOOL-tools" source

      - name: Get version information of ${{matrix.tool}}
        id: version
        run: |
          if [ -f "${TOOL}-version.txt" ]; then
            BUILT_VERSION="$(cat "${TOOL}-version.txt")"
          else
            BUILT_VERSION=""
          fi
          cd source/project
          GH_VERSION="$(git log -1 --date=format:%Y%m%d --pretty="$(make -pn 2>/dev/null | sed -n "s/^VERSION := //p")~git%cd.%h")"
          printf "%s=%s\n" "$TOOL" "$GH_VERSION" >> "$GITHUB_OUTPUT"
          printf "tool=%s\n" "$GH_VERSION" >> "$GITHUB_OUTPUT"
          if [ "$BUILT_VERSION" = "$GH_VERSION" ] && [ "${{github.event_name}}" != "workflow_dispatch" ]; then
            printf "build=false\nbuild_%s=false\n" "$TOOL" >> "$GITHUB_OUTPUT"
          else
            printf "build=true\nbuild_%s=true\n" "$TOOL" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up QEMU
        if: ${{matrix.arch != 'amd64' && steps.version.outputs.build == 'true'}}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{matrix.arch}}

      - name: Set up build environment for cross compiling
        if: ${{matrix.arch != 'amd64' && steps.version.outputs.build == 'true'}}
        run: |
          if [ "$ARCH" = "arm64" ]; then
            sed -i "s/x86-64/armv8-a/g" source/project/makefiles-local/Makefile.local.x86_64
          elif [ "$ARCH" = "armhf" ]; then
            sed -i "s/x86-64/armv7-a+fp/g" source/project/makefiles-local/Makefile.local.x86_64
          fi
          sudo sed -i "s/^deb /deb [arch=amd64] /" /etc/apt/sources.list
          sudo dpkg --add-architecture "$ARCH"
          source /etc/lsb-release
          for archive in "" "-updates" "-backports" "-security"; do
            printf "deb [arch=%s] http://ports.ubuntu.com/ubuntu-ports/ %s main restricted universe multiverse\n" "$ARCH" "${DISTRIB_CODENAME}${archive}"
          done | sudo tee "/etc/apt/sources.list.d/${ARCH}.list"
          sudo apt-get update
          sudo apt-get install {libssl-dev,libtinfo-dev,libpng-dev,zlib1g-dev,libncurses-dev}:"$ARCH"

      - name: Build ${{matrix.tool}} for ${{matrix.arch}}
        if: ${{steps.version.outputs.build == 'true'}}
        run: |
          cd source/project
          export PRE
          if [ "$ARCH" = "arm64" ]; then
            CC_PKG="gcc-aarch64-linux-gnu"
            PRE="aarch64-linux-gnu-"
          elif [ "$ARCH" = "armhf" ]; then
            CC_PKG="gcc-arm-linux-gnueabihf"
            PRE="arm-linux-gnueabihf-"
          elif [ "$ARCH" = "amd64" ]; then
            CC_PKG="gcc-x86-64-linux-gnu"
            PRE="x86_64-linux-gnu-"
          fi
          sudo apt-get install "$CC_PKG"
          sed -i "s/^INSTALL_PATH=.*$/INSTALL_PATH=\/usr/" setup.sh
          make

      - name: Generate Debian package
        if: ${{steps.version.outputs.build == 'true'}}
        run: |
          cd source/project
          if [ "$TOOL" = "wit" ]; then
            printf "Manipulate Wii and GameCube ISO images and WBFS containers.\n" > description-pak
            REQUIRES="libc6, libssl3, libtinfo6, zlib1g"
          elif [ "$TOOL" = "wszst" ]; then
            printf "Manipulate SZS, U8, WBZ, WU8, PACK, BRRES, BREFF, BREFT, BMG, KCL, KMP, MDL, PAT, TEX, TPL, BTI, main.dol and StaticR.rel files of Mario Kart Wii.\n" > description-pak
            REQUIRES="libc6, libpng16-16, libssl3, libtinfo6, zlib1g"
          fi
          sudo apt-get install checkinstall
          CHECKINSTALL="$(command -v checkinstall)"
          sudo sed -i "s/dpkg-deb -b /dpkg-deb -Zxz -b /g" "$CHECKINSTALL"
          sudo sed -i "s/-\\\${RELEASE}//g" "$CHECKINSTALL"
          sudo checkinstall -y -D --arch="$ARCH" --pakdir="debian"\
            --pkgname="$TOOL" --pkgversion="${{steps.version.outputs.tool}}" --requires="$REQUIRES"\
            --pkggroup=utils --pkglicense="GPL2" --maintainer="Marquis" --pkgsource="$TOOL"

      - name: Upload Debian package
        if: ${{steps.version.outputs.build == 'true'}}
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.tool}}-${{matrix.arch}}
          path: source/project/debian/*.deb
          if-no-files-found: error

  upload:
    name: Upload built packages to repository
    runs-on: ubuntu-latest
    needs: build
    if: ${{needs.build.outputs.build_wit == 'true' || needs.build.outputs.build_wszst == 'true'}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{secrets.GPG_PRIVATE_KEY}}
          passphrase: ${{secrets.PASSPHRASE}}

      - name: Download built packages
        uses: actions/download-artifact@v3
        with:
          path: staging

      - name: Move wit packages to debian/
        if: ${{needs.build.outputs.build_wit}}
        run: |
          mkdir -p debian
          for deb in staging/wit-*/wit_*.deb; do
            if [ "$(dpkg-deb -f "$deb" Version)" != "${{needs.build.outputs.wit}}" ]; then
              printf "Versions for wit do not match." 1>&2
              exit 1
            fi
            mv "$deb" debian
          done
          printf "wit version: %s\n" "${{needs.build.outputs.wit}}"
          printf "%s\n" "${{needs.build.outputs.wit}}" > wit-version.txt

      - name: Move wszst packages to debian/
        if: ${{needs.build.outputs.build_wszst}}
        run: |
          mkdir -p debian
          for deb in staging/wszst-*/wszst_*.deb; do
            if [ "$(dpkg-deb -f "$deb" Version)" != "${{needs.build.outputs.wszst}}" ]; then
              printf "Versions for wszst do not match." 1>&2
              exit 1
            fi
            mv "$deb" debian
          done
          printf "wszst version: %s\n" "${{needs.build.outputs.wszst}}"
          printf "%s\n" "${{needs.build.outputs.wszst}}" > wszst-version.txt

      - name: Update package index
        run: |
          sudo apt-get update
          sudo apt-get install apt-utils
          cd debian
          dpkg-scanpackages --multiversion . > Packages
          gzip -fk9 Packages
          apt-ftparchive release . > Release
          gpg --default-key "${{github.repository_owner}}" -abs -o- Release > Release.gpg
          gpg --default-key "${{github.repository_owner}}" --clearsign -o- Release > InRelease

      - name: Commit to local repository
        run: |
          rm -rf staging
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "Build" -m "wit: ${{needs.build.outputs.wit}}
          wszst: ${{needs.build.outputs.wszst}}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
